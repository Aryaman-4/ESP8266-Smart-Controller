/* 
  ESP8266 Web Server with LED Control
  
  This sketch creates a WiFi web server that allows you to control
  two GPIO pins through a web interface, as well as the built-in LED.
  
  Based on ESP8266WiFi examples and the standard Blink example.
*/

// Load Wi-Fi library
#include <ESP8266WiFi.h>

// Replace with your network credentials
const char* ssid     = "S23 FE";
const char* password = "Arman@SESA172913";

// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;

// Auxiliar variables to store the current output state
String output5State = "off";
String output4State = "off";
String builtInLedState = "off";

// Assign output variables to GPIO pins
const int output5 = 5;
const int output4 = 4;
// LED_BUILTIN is already defined for the on-board LED

// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0; 
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;

// Variables for the blinking functionality
unsigned long previousBlinkMillis = 0;
const long blinkInterval = 1000;  // blink interval in milliseconds
bool autoBlinkEnabled = false;

void setup() {
  Serial.begin(115200);
  
  // Initialize the output variables as outputs
  pinMode(output5, OUTPUT);
  pinMode(output4, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);
  
  // Set outputs to LOW
  digitalWrite(output5, LOW);
  digitalWrite(output4, LOW);
  digitalWrite(LED_BUILTIN, LOW);

  // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
}

void loop() {
  // Handle the web server
  WiFiClient client = server.available();   // Listen for incoming clients
  
  // Handle the LED blinking if auto-blink is enabled
  if (autoBlinkEnabled) {
    unsigned long currentMillis = millis();
    if (currentMillis - previousBlinkMillis >= blinkInterval) {
      previousBlinkMillis = currentMillis;
      // Toggle the LED state
      if (digitalRead(LED_BUILTIN) == LOW) {
        digitalWrite(LED_BUILTIN, HIGH);
        builtInLedState = "on";
      } else {
        digitalWrite(LED_BUILTIN, LOW);
        builtInLedState = "off";
      }
    }
  }

  if (client) {                             // If a new client connects,
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    currentTime = millis();
    previousTime = currentTime;
    while (client.connected() && currentTime - previousTime <= timeoutTime) { // loop while the client's connected
      currentTime = millis();         
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            
            // turns the GPIOs on and off
            if (header.indexOf("GET /5/on") >= 0) {
              Serial.println("GPIO 5 on");
              output5State = "on";
              digitalWrite(output5, HIGH);
            } else if (header.indexOf("GET /5/off") >= 0) {
              Serial.println("GPIO 5 off");
              output5State = "off";
              digitalWrite(output5, LOW);
            } else if (header.indexOf("GET /4/on") >= 0) {
              Serial.println("GPIO 4 on");
              output4State = "on";
              digitalWrite(output4, HIGH);
            } else if (header.indexOf("GET /4/off") >= 0) {
              Serial.println("GPIO 4 off");
              output4State = "off";
              digitalWrite(output4, LOW);
            } else if (header.indexOf("GET /led/on") >= 0) {
              Serial.println("Built-in LED on");
              builtInLedState = "on";
              digitalWrite(LED_BUILTIN, HIGH);
              autoBlinkEnabled = false;
            } else if (header.indexOf("GET /led/off") >= 0) {
              Serial.println("Built-in LED off");
              builtInLedState = "off";
              digitalWrite(LED_BUILTIN, LOW);
              autoBlinkEnabled = false;
            } else if (header.indexOf("GET /led/blink") >= 0) {
              Serial.println("Built-in LED auto-blink");
              autoBlinkEnabled = true;
              previousBlinkMillis = millis();
            }
            
            // Display the HTML web page
            client.println("<!DOCTYPE html><html lang=\"en\">");
            client.println("<head>");
            client.println("<meta charset=\"UTF-8\">");
            client.println("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
            client.println("<title>ESP8266 Smart Controller</title>");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            
            // CSS styling
            client.println("<style>");
            client.println("* { box-sizing: border-box; margin: 0; padding: 0; }");
            client.println("body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%); min-height: 100vh; padding: 20px; }");
            client.println("header { margin-bottom: 30px; }");
            client.println("h1 { color: #2c3e50; text-align: center; margin: 20px 0; text-shadow: 1px 1px 3px rgba(0,0,0,0.1); }");
            client.println(".container { max-width: 800px; margin: 0 auto; background-color: white; border-radius: 15px; padding: 25px; box-shadow: 0 10px 20px rgba(0,0,0,0.1); }");
            client.println(".card { background-color: #f8f9fa; border-radius: 10px; padding: 20px; margin-bottom: 20px; box-shadow: 0 4px 6px rgba(0,0,0,0.05); transition: transform 0.3s ease; }");
            client.println(".card:hover { transform: translateY(-5px); }");
            client.println(".card-title { color: #2c3e50; font-size: 1.2rem; margin-bottom: 15px; display: flex; align-items: center; justify-content: space-between; }");
            client.println(".card-title .status { font-size: 0.9rem; padding: 5px 10px; border-radius: 20px; }");
            client.println(".status-on { background-color: #d4edda; color: #155724; }");
            client.println(".status-off { background-color: #f8d7da; color: #721c24; }");
            client.println(".status-blink { background-color: #fff3cd; color: #856404; }");
            client.println(".controls { display: flex; justify-content: center; gap: 10px; flex-wrap: wrap; }");
            client.println(".button { display: inline-block; font-weight: 500; color: white; text-align: center; padding: 12px 25px; border-radius: 8px; cursor: pointer; transition: all 0.3s ease; border: none; font-size: 1rem; text-decoration: none; }");
            client.println(".button-on { background-color: #28a745; }");
            client.println(".button-on:hover { background-color: #218838; }");
            client.println(".button-off { background-color: #dc3545; }");
            client.println(".button-off:hover { background-color: #c82333; }");
            client.println(".button-blink { background-color: #ffc107; }");
            client.println(".button-blink:hover { background-color: #e0a800; }");
            client.println(".info-bar { background-color: #e9ecef; padding: 15px; border-radius: 8px; margin-top: 20px; text-align: center; font-size: 0.9rem; color: #6c757d; }");
            client.println(".info-bar p { margin: 5px 0; }");
            client.println("@media (max-width: 600px) { .button { padding: 10px 20px; font-size: 0.9rem; } }");
            client.println("footer { text-align: center; margin-top: 30px; color: #6c757d; font-size: 0.9rem; }");
            client.println("</style>");
            
            // JavaScript for some interactivity
            client.println("<script>");
            client.println("function updateClock() {");
            client.println("  const now = new Date();");
            client.println("  const timeElem = document.getElementById('current-time');");
            client.println("  timeElem.textContent = now.toLocaleTimeString();");
            client.println("}");
            client.println("function updateStatus() {");
            client.println("  const blinkIndicator = document.getElementById('blink-indicator');");
            client.println("  if (blinkIndicator) {");
            client.println("    blinkIndicator.classList.toggle('status-on');");
            client.println("    blinkIndicator.classList.toggle('status-off');");
            client.println("  }");
            client.println("}");
            client.println("window.onload = function() {");
            client.println("  setInterval(updateClock, 1000);");
            client.println("  setInterval(updateStatus, 1000);");
            client.println("};");
            client.println("</script>");
            client.println("</head>");
            
            // Body content with improved structure
            client.println("<body>");
            client.println("<div class=\"container\">");
            client.println("<header>");
            client.println("<h1>ESP8266 Smart Controller</h1>");
            client.println("</header>");
            
            // GPIO 5 Card
            client.println("<div class=\"card\">");
            client.println("<div class=\"card-title\">");
            client.println("<span>GPIO 5 Control</span>");
            if (output5State == "on") {
              client.println("<span class=\"status status-on\">ON</span>");
            } else {
              client.println("<span class=\"status status-off\">OFF</span>");
            }
            client.println("</div>");
            client.println("<div class=\"controls\">");
            client.println("<a href=\"/5/on\" class=\"button button-on\">Turn ON</a>");
            client.println("<a href=\"/5/off\" class=\"button button-off\">Turn OFF</a>");
            client.println("</div>");
            client.println("</div>");
            
            // GPIO 4 Card
            client.println("<div class=\"card\">");
            client.println("<div class=\"card-title\">");
            client.println("<span>GPIO 4 Control</span>");
            if (output4State == "on") {
              client.println("<span class=\"status status-on\">ON</span>");
            } else {
              client.println("<span class=\"status status-off\">OFF</span>");
            }
            client.println("</div>");
            client.println("<div class=\"controls\">");
            client.println("<a href=\"/4/on\" class=\"button button-on\">Turn ON</a>");
            client.println("<a href=\"/4/off\" class=\"button button-off\">Turn OFF</a>");
            client.println("</div>");
            client.println("</div>");
            
            // Built-in LED Card
            client.println("<div class=\"card\">");
            client.println("<div class=\"card-title\">");
            client.println("<span>Built-in LED Control</span>");
            if (autoBlinkEnabled) {
              client.println("<span class=\"status status-blink\" id=\"blink-indicator\">BLINKING</span>");
            } else if (builtInLedState == "on") {
              client.println("<span class=\"status status-on\">ON</span>");
            } else {
              client.println("<span class=\"status status-off\">OFF</span>");
            }
            client.println("</div>");
            client.println("<div class=\"controls\">");
            client.println("<a href=\"/led/on\" class=\"button button-on\">Turn ON</a>");
            client.println("<a href=\"/led/off\" class=\"button button-off\">Turn OFF</a>");
            client.println("<a href=\"/led/blink\" class=\"button button-blink\">BLINK</a>");
            client.println("</div>");
            client.println("</div>");
            
            // Info bar with real-time clock
            client.println("<div class=\"info-bar\">");
            client.println("<p>Device IP: " + WiFi.localIP().toString() + "</p>");
            client.println("<p>Current Time: <span id=\"current-time\">--:--:--</span></p>");
            client.println("<p>Connection: Active</p>");
            client.println("</div>");
            
            client.println("</div>"); // End container
            
            client.println("<footer>");
            client.println("<p>&copy; " + String(2025) + " ESP8266 Smart Controller</p>");
            client.println("</footer>");
            
            client.println("</body></html>");
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
